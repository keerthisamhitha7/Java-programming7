Stream :
	* A stream is a sequence of data. 
	* In Java a stream is composed of bytes. 	
	* It's called a stream because it is like a stream of water that continues to flow.

Hierarchy of Reading data :

Input Stream :
	--> Java application uses an Input stream to Read data from a source, it may be a file, an array or device, etc.

(1) File Input Stream :
	- Java FileInputStream class obtains input bytes from a file. 
	- It is used for reading the data such as image data, audio, video etc. 
	- We can also read character stream data here.

(2) Filter Input Stream :
	- Java FilterInputStream class implements the InputStream.
	- It contains different sub classes as BufferedInputStream, DataInputStream for providing additional functionality. 
	- It is less used in the programming.

	BufferedInputStream :
		- Java BufferedInputStream is used to read information from stream. 
		- It internally uses buffer mechanism to make the performance fast.
		- When a BufferedInputStream is created, an internal buffer array is created.
		- When the bytes from the stream are skipped or read, the internal buffer automatically 
		refilled from the contained input stream, many bytes at a time.
Reader :
	

(1) Buffered Reader :
	- Java BufferedReader class is used to read the text from a character based input stream.
	- It can be used to read data line by line by readLine() method. 
	- It makes the performance fast. 
	- It inherits the Reader class.

(2) InputStreamReader :
	- An InputStreamReader is a connection between byte streams to character streams.
	- It reads bytes and decodes them into characters using a specified charset. 
	- The charset that is uses may be specified by name, or else default charset may accepted.
	
	FileReader :
		- Java FileReader class is used to read data from the file. 
		- It returns data in byte format like FileInputStream class.
		- It is character oriented class which is used for file handling in java.

Hierarchy of Writing data :

Output Stream : 
	--> Java application uses an output stream to write data to a destination, it may be a file, an array, or a device, etc.

(1) FileOutputStream :
	- Java FileOutputStream is an output stream used for writing data to a file.
	- If we have to write primitive values into a file, use FileOutputStream class. 
	- We can write byte oriented as well as character oriented data through FileOutputStream class. 
	- For character oriented data, it is preferred to use FileWriter than FileOutStream.

(2) FilterOutputStream :
	- Java FilterOutputStream class implements the OutputStream class. 
	- It provides different sub classes such as BufferedOutputStream and DataOutputStream to provide additional functionality. 
	- It is less used individually.

	BufferedOutputStream :
		- Java BufferedOutputStream class is used for buffering an output stream. 
		- It internally uses buffer to store data. 
		- It adds more efficiency than to write data directly into a stream. 
		- So, it makes the performance fast.
Writer :

(1) BufferedWriter :
	- Java BufferedWriter class is used to provide buffering for Writer instances.
	- It makes the performance fast. 
	- It inherits Writer class. 
	- The buffering characters are used for providing the efficient writing of single arrays, characters, and strings.

(2) OutputStreamWriter :
	- An OutputStreamWriter is a bridge from character streams to byte streams. 
	- Characters written to it are encoded into bytes using a specified charset .

	FileWriter :
		- Java FileWriter class is used to write character-oriented data to a file. 
		- It is character oriented class which is used for file handling in java.
		- Like FileInputStream class, We don't have to convert string into byte array 
		because it provides method to write string directly.


